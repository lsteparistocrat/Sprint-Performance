name: Jira Remaining Points (by Sprint)

on:
  workflow_dispatch:
    inputs:
      sprint_id:
        description: "Jira sprint ID"
        required: true
      track_status_names:
        description: "Comma-separated statuses to count (e.g. To Do,In Progress,Code Review)"
        required: false
        default: "To Do,In Progress,Code Review"
      uat_status_name:
        description: "Status name treated as done"
        required: false
        default: "UAT"
      uat_is_permanent:
        description: "Once UAT, always 0 afterwards? (true/false)"
        required: false
        default: "true"

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Create extractor script
        run: |
          mkdir -p scripts
          cat > scripts/jira_remaining_points.py << 'PY'
#!/usr/bin/env python3
import os, sys, csv, time, requests, datetime as dt
from urllib.parse import urljoin

# -------- Config from env --------
JIRA_BASE_URL        = os.getenv("JIRA_BASE_URL")
JIRA_EMAIL           = os.getenv("JIRA_EMAIL")
JIRA_API_TOKEN       = os.getenv("JIRA_API_TOKEN")
SPRINT_ID            = os.getenv("SPRINT_ID")
SP_FIELD             = os.getenv("STORY_POINTS_FIELD")
TRACK_STATUS_NAMES   = [s.strip() for s in os.getenv("TRACK_STATUS_NAMES", "To Do,In Progress,Code Review").split(",")]
UAT_STATUS_NAME      = os.getenv("UAT_STATUS_NAME", "UAT")
TREAT_UAT_AS_DONE_PERMANENT = os.getenv("UAT_IS_PERMANENT", "true").lower() == "true"
OUT_DIR              = os.getenv("OUT_DIR", "data")

missing = [k for k,v in {
  "JIRA_BASE_URL":JIRA_BASE_URL, "JIRA_EMAIL":JIRA_EMAIL, "JIRA_API_TOKEN":JIRA_API_TOKEN,
  "STORY_POINTS_FIELD":SP_FIELD, "SPRINT_ID":SPRINT_ID
}.items() if not v]
if missing:
    print(f"Missing env vars: {', '.join(missing)}", file=sys.stderr); sys.exit(2)

# -------- HTTP session --------
session = requests.Session()
session.auth = (JIRA_EMAIL, JIRA_API_TOKEN)
session.headers.update({"Accept":"application/json"})

def get(url, params=None):
    r = session.get(url, params=params, timeout=30)
    if r.status_code == 429:
        time.sleep(5)
        r = session.get(url, params=params, timeout=30)
    r.raise_for_status()
    return r.json()

def jira_url(path): return urljoin(JIRA_BASE_URL, path)
def get_sprint(sprint_id): return get(jira_url(f"/rest/agile/1.0/sprint/{sprint_id}"))

def list_sprint_issues(sprint
